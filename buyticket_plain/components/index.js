import React, { Component } from 'react';
import 'react-native-gesture-handler';
import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';
import MainBookTicket from './main/index';
import BookTicket from './bookticket/index';
import ChooseTicket from './chooseTicket/index';
import SearchIDPlane from './search-id/index';
import InformationPlane from './information-plane-of-you/index';
import InputInforCustomer from './../components/infor-customer/index';
import AcceptBooking from './../components/accept-booking/index';
import messaging from '@react-native-firebase/messaging';
var PushNotification = require("react-native-push-notification");
const Stack = createStackNavigator();
class Index extends Component {
  constructor(props) {
    super(props);
    this.state = {};
  }
  componentDidMount() {
    messaging()
      .subscribeToTopic('notifyTicket')
      .then(() => console.log('Subscribed to topic!'));
      messaging().onMessage(async remoteMessage => {
        Alert.alert('A new FCM message arrived!', JSON.stringify(remoteMessage));
        console.log(JSON.stringify(remoteMessage));
        PushNotification.localNotification({
          /* Android Only Properties */
          id: remoteMessage.message_id, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
          ticker: "My Notification Ticker", // (optional)
          autoCancel: true, // (optional) default: true
          largeIcon: "ic_launcher", // (optional) default: "ic_launcher"
          smallIcon: "ic_notification", // (optional) default: "ic_notification" with fallback for "ic_launcher"
          bigText: "My big text that will be shown when notification is expanded", // (optional) default: "message" prop
          subText: "This is a subText", // (optional) default: none
          color: "red", // (optional) default: system default
          vibrate: true, // (optional) default: true
          vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
          tag: "some_tag", // (optional) add tag to message
          group: "group", // (optional) add group to message
          ongoing: false, // (optional) set whether this is an "ongoing" notification
          priority: "high", // (optional) set notification priority, default: high
          visibility: "private", // (optional) set notification visibility, default: private
          importance: "high", // (optional) set notification importance, default: high
          allowWhileIdle: false, // (optional) set notification to work while on doze, default: false
          ignoreInForeground: false, // (optional) if true, the notification will not be visible when the app is in the foreground (useful for parity with how iOS notifications appear)
        
        });
      });
      
  
  }
  render() {
    return (
      <NavigationContainer>
        <Stack.Navigator>
          <Stack.Screen
            name="Home"
            component={MainBookTicket}
            options={{
              title: '',
              headerShown: false,
            }}
          />
          <Stack.Screen
            name="BookTicket"
            component={BookTicket}
            options={{
              title: 'Đặt vé',
              headerTintColor: 'blue',
            }}
          />
          <Stack.Screen
            name="ChooseTicket"
            component={ChooseTicket}
            options={{
              title: 'Chọn chuyến bay',
              headerTintColor: 'blue',
            }}
          />
          <Stack.Screen
            name="Checkin"
            component={SearchIDPlane}
            options={{
              title: 'Đặt chỗ của tôi',
              headerTintColor: 'blue',
            }}
          />
          <Stack.Screen
            name="InformationPlane"
            component={InformationPlane}
            options={{
              title: 'Thông tin chuyến bay của bạn',
              headerTintColor: 'blue',
            }}
          />
          <Stack.Screen
            name="Inforcustomer"
            component={InputInforCustomer}
            options={{
              title: 'Thông tin hành khách',
              headerTintColor: 'blue',
            }}
          />
          <Stack.Screen
            name="acceptBooking"
            component={AcceptBooking}
            options={{
              title: 'Xác nhận đặt vé',
              headerTintColor: 'blue',
            }}
          />
        </Stack.Navigator>
      </NavigationContainer>
    );
  }
}
export default Index;
